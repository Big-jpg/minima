name: External LLM Snapshot

on:
  workflow_dispatch:
    inputs:
      target_repo: { description: "owner/repo of the target", required: true, default: "owner/repo" }
      ref:        { description: "branch, tag or commit SHA",  required: false, default: "main" }
      redact:     { description: "Redact secrets (true/false)", required: false, default: "true" }
      maxFileMB:  { description: "Max per-file size (MB)",     required: false, default: "5" }
      include:    { description: "Force-include regex (comma-separated)", required: false, default: "" }
      exclude:    { description: "Exclude regex (comma-separated)",       required: false, default: "" }
  workflow_call:
    inputs:
      target_repo: { required: true,  type: string }
      ref:        { required: false, type: string,  default: "main" }
      redact:     { required: false, type: boolean, default: true }
      maxFileMB:  { required: false, type: number,  default: 5 }
      include:    { required: false, type: string,  default: "" }
      exclude:    { required: false, type: string,  default: "" }
    secrets:
      SNAPSHOT_TOKEN: { required: false }

jobs:
  snapshot:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    env:
      CONTROLLER_REPO: Big-jpg/minima
      CONTROLLER_REF:  main
    steps:
      - name: Checkout controller repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CONTROLLER_REPO }}
          ref: ${{ github.ref }}
          path: controller
          fetch-depth: 1

      - name: Install PowerShell & utils
        run: |
          sudo apt-get update
          sudo apt-get install -y powershell git zip curl

      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.target_repo }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.SNAPSHOT_TOKEN || github.token }}   # PAT for private; default token for public
          path: target
          fetch-depth: 1

      - name: Run snapshot
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
      
          # Locate the script (supports both repo root and .controller/)
          $candidates = @(
            "./controller/.controller/llm_snapshot_v2.ps1",
            "./controller/llm_snapshot_v2.ps1"
          )
          $script = $null
          foreach ($p in $candidates) {
            if (Test-Path $p) { $script = (Resolve-Path $p).Path; break }
          }
    
          # Fallback: fetch raw file if not found (public controller repo)
          if (-not $script) {
            $raw = "https://raw.githubusercontent.com/Big-jpg/minima/main/.controller/llm_snapshot_v2.ps1"
            Write-Host "Script not found locally. Fetching: $raw"
            curl -fsSL $raw -o ./controller/llm_snapshot_v2.ps1
            if (-not $?) { Write-Error "Failed to fetch llm_snapshot_v2.ps1"; exit 1 }
            $script = (Resolve-Path "./controller/llm_snapshot_v2.ps1").Path
          }
    
          $include = "${{ inputs.include }}".Split(",") | ForEach-Object { $_.Trim() } | Where-Object { $_ }
          $exclude = "${{ inputs.exclude }}".Split(",") | ForEach-Object { $_.Trim() } | Where-Object { $_ }
      
          $outDir = Join-Path (Get-Location) "out_snapshot"
      
          $args = @(
            "-ProjectFolder", (Resolve-Path "./target").Path,
            "-RedactSecrets:$([bool]::Parse('${{ inputs.redact }}'))",
            "-MaxFileMB", "${{ inputs.maxFileMB }}",
            "-OutputDir", $outDir,
            "-Zip"
          )
          if ($include.Count -gt 0) { $args += @("-Include"); $args += $include }
          if ($exclude.Count -gt 0) { $args += @("-Exclude"); $args += $exclude }
      
          pwsh -File $script @args
    
          # Export paths and safe artifact name
          $snapDir = (Resolve-Path $outDir).Path
          "SNAPDIR=$snapDir"     | Out-File -FilePath $env:GITHUB_ENV -Append
          "ZIPPATH=$snapDir.zip" | Out-File -FilePath $env:GITHUB_ENV -Append
      
          $label = "${{ inputs.target_repo }}@${{ inputs.ref }}"
          $safe  = $label.Replace('/','-').Replace(':','-').Replace('@','-').Replace('|','-').Replace('*','-').Replace('?','-').Replace('\','-')
          $safe  = $safe -replace '[\r\n<>"]','-'
          "SAFE_TARGET=$safe"    | Out-File -FilePath $env:GITHUB_ENV -Append
      
          # Write a small job summary without here-strings (avoids YAML indent issues)
          $lines = @()
          $lines += "### Snapshot complete"
          $lines += "- Target: $label  "
          $lines += "- Folder: `$snapDir`  "
          $lines += "- Zip: `$($snapDir).zip`"
          ($lines -join "`n") | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append

      - name: Upload snapshot (folder)
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-${{ env.SAFE_TARGET }}-folder
          path: ${{ env.SNAPDIR }}
          if-no-files-found: warn
          retention-days: 14

      - name: Upload snapshot (zip)
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-${{ env.SAFE_TARGET }}-zip
          path: ${{ env.ZIPPATH }}
          if-no-files-found: error
          retention-days: 14
