name: External LLM Snapshot

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: "owner/repo of the target"
        required: true
        default: "owner/repo"
      ref:
        description: "branch, tag or commit SHA"
        required: false
        default: "main"
      redact:
        description: "Redact secrets (true/false)"
        required: false
        default: "true"
      maxFileMB:
        description: "Max per-file size (MB)"
        required: false
        default: "5"
      include:
        description: "Force-include regex (comma-separated)"
        required: false
        default: ""
      exclude:
        description: "Exclude regex (comma-separated)"
        required: false
        default: ""
  workflow_call:
    inputs:
      target_repo: { required: true, type: string }
      ref:        { required: false, type: string,  default: "main" }
      redact:     { required: false, type: boolean, default: true }
      maxFileMB:  { required: false, type: number,  default: 5 }
      include:    { required: false, type: string,  default: "" }
      exclude:    { required: false, type: string,  default: "" }
    secrets:
      SNAPSHOT_TOKEN:
        required: false

jobs:
  snapshot:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      # 1) Checkout the CONTROLLER repo (this repo) explicitly, into ./controller
      - name: Checkout controller repo
        uses: actions/checkout@v4
        with:
          repository: Big-jpg/minima         # <-- controller repo
          ref: ${{ github.ref }}             # e.g. main (or the tag invoking it)
          path: controller
          fetch-depth: 1

      - name: Install PowerShell & utils
        run: |
          sudo apt-get update
          sudo apt-get install -y powershell git zip

      # 2) Checkout the TARGET repo into ./target
      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.target_repo }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.SNAPSHOT_TOKEN || github.token }}  # PAT for private, default for public
          path: target
          fetch-depth: 1

      # 3) Run snapshot using the script from ./controller
      - name: Run snapshot
        shell: pwsh
        run: |
          $script = Resolve-Path "./controller/llm_snapshot_v2.ps1"
          if (-not (Test-Path $script)) { Write-Error "Snapshot script not found at $script" }

          $include = "${{ inputs.include }}".Split(",") | ForEach-Object { $_.Trim() } | Where-Object { $_ }
          $exclude = "${{ inputs.exclude }}".Split(",") | ForEach-Object { $_.Trim() } | Where-Object { $_ }

          $args = @(
            "-ProjectFolder", (Resolve-Path "./target").Path,
            "-RedactSecrets:$([bool]::Parse('${{ inputs.redact }}'))",
            "-MaxFileMB", "${{ inputs.maxFileMB }}",
            "-Zip"
          )
          if ($include.Count -gt 0) { $args += @("-Include"); $args += $include }
          if ($exclude.Count -gt 0) { $args += @("-Exclude"); $args += $exclude }

          pwsh -File $script @args

          # Find snapshot directory in current workspace (not parent)
          $root = Get-Location
          $dir = Get-ChildItem -Directory $root |
            Where-Object { $_.Name -like 'llm_snapshot_*' } |
            Sort-Object LastWriteTime -Descending |
            Select-Object -First 1

          if (-not $dir) {
            $dir = Get-ChildItem -Directory $root -Recurse |
              Where-Object { $_.FullName -match '/llm_snapshot_\d{8}_\d{6}$' } |
              Sort-Object LastWriteTime -Descending |
              Select-Object -First 1
          }

          if (-not $dir) { Write-Error "Snapshot directory not found." }

          # Export paths & human label
          "SNAPDIR=$($dir.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          "ZIPPATH=$($dir.FullName).zip" | Out-File -FilePath $env:GITHUB_ENV -Append
          "TARGET=${{ inputs.target_repo }}@${{ inputs.ref }}" | Out-File -FilePath $env:GITHUB_ENV -Append

          # Make an artifact-safe name (no / : < > | * ? \r \n \)
          $safe = "${{ inputs.target_repo }}@${{ inputs.ref }}"
          $safe = $safe.Replace('/','-').Replace(':','-').Replace('@','-').Replace('|','-').Replace('*','-').Replace('?','-').Replace('\','-')
          $safe = $safe -replace '[\r\n<>"]','-'
          "SAFE_TARGET=$safe" | Out-File -FilePath $env:GITHUB_ENV -Append

      # 4) Upload artifacts with safe names
      - name: Upload snapshot (folder)
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-${{ env.SAFE_TARGET }}-folder
          path: ${{ env.SNAPDIR }}

      - name: Upload snapshot (zip)
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-${{ env.SAFE_TARGET }}-zip
          path: ${{ env.ZIPPATH }}
